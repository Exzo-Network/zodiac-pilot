(()=>{var Ur=Object.create;var X=Object.defineProperty;var Tr=Object.getOwnPropertyDescriptor;var Ir=Object.getOwnPropertyNames;var dr=Object.getPrototypeOf,Cr=Object.prototype.hasOwnProperty;var Lr=e=>X(e,"__esModule",{value:!0});var Sr=(e,r)=>()=>(e&&(r=e(e=0)),r);var D=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var Rr=(e,r,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of Ir(r))!Cr.call(e,i)&&i!=="default"&&X(e,i,{get:()=>r[i],enumerable:!(t=Tr(r,i))||t.enumerable});return e},rr=e=>Rr(Lr(X(e!=null?Ur(dr(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var ir=D(N=>{F();"use strict";N.byteLength=Mr;N.toByteArray=br;N.fromByteArray=Wr;var g=[],m=[],_r=typeof Uint8Array!="undefined"?Uint8Array:Array,G="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(d=0,tr=G.length;d<tr;++d)g[d]=G[d],m[G.charCodeAt(d)]=d;var d,tr;m["-".charCodeAt(0)]=62;m["_".charCodeAt(0)]=63;function er(e){var r=e.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=e.indexOf("=");t===-1&&(t=r);var i=t===r?0:4-t%4;return[t,i]}function Mr(e){var r=er(e),t=r[0],i=r[1];return(t+i)*3/4-i}function kr(e,r,t){return(r+t)*3/4-t}function br(e){var r,t=er(e),i=t[0],n=t[1],o=new _r(kr(e,i,n)),u=0,h=n>0?i-4:i,f;for(f=0;f<h;f+=4)r=m[e.charCodeAt(f)]<<18|m[e.charCodeAt(f+1)]<<12|m[e.charCodeAt(f+2)]<<6|m[e.charCodeAt(f+3)],o[u++]=r>>16&255,o[u++]=r>>8&255,o[u++]=r&255;return n===2&&(r=m[e.charCodeAt(f)]<<2|m[e.charCodeAt(f+1)]>>4,o[u++]=r&255),n===1&&(r=m[e.charCodeAt(f)]<<10|m[e.charCodeAt(f+1)]<<4|m[e.charCodeAt(f+2)]>>2,o[u++]=r>>8&255,o[u++]=r&255),o}function Dr(e){return g[e>>18&63]+g[e>>12&63]+g[e>>6&63]+g[e&63]}function Nr(e,r,t){for(var i,n=[],o=r;o<t;o+=3)i=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(e[o+2]&255),n.push(Dr(i));return n.join("")}function Wr(e){for(var r,t=e.length,i=t%3,n=[],o=16383,u=0,h=t-i;u<h;u+=o)n.push(Nr(e,u,u+o>h?h:u+o));return i===1?(r=e[t-1],n.push(g[r>>2]+g[r<<4&63]+"==")):i===2&&(r=(e[t-2]<<8)+e[t-1],n.push(g[r>>10]+g[r>>4&63]+g[r<<2&63]+"=")),n.join("")}});var nr=D(z=>{F();z.read=function(e,r,t,i,n){var o,u,h=n*8-i-1,f=(1<<h)-1,c=f>>1,l=-7,p=t?n-1:0,E=t?-1:1,x=e[r+p];for(p+=E,o=x&(1<<-l)-1,x>>=-l,l+=h;l>0;o=o*256+e[r+p],p+=E,l-=8);for(u=o&(1<<-l)-1,o>>=-l,l+=i;l>0;u=u*256+e[r+p],p+=E,l-=8);if(o===0)o=1-c;else{if(o===f)return u?NaN:(x?-1:1)*(1/0);u=u+Math.pow(2,i),o=o-c}return(x?-1:1)*u*Math.pow(2,o-i)};z.write=function(e,r,t,i,n,o){var u,h,f,c=o*8-n-1,l=(1<<c)-1,p=l>>1,E=n===23?Math.pow(2,-24)-Math.pow(2,-77):0,x=i?0:o-1,S=i?1:-1,vr=r<0||r===0&&1/r<0?1:0;for(r=Math.abs(r),isNaN(r)||r===1/0?(h=isNaN(r)?1:0,u=l):(u=Math.floor(Math.log(r)/Math.LN2),r*(f=Math.pow(2,-u))<1&&(u--,f*=2),u+p>=1?r+=E/f:r+=E*Math.pow(2,1-p),r*f>=2&&(u++,f/=2),u+p>=l?(h=0,u=l):u+p>=1?(h=(r*f-1)*Math.pow(2,n),u=u+p):(h=r*Math.pow(2,p-1)*Math.pow(2,n),u=0));n>=8;e[t+x]=h&255,x+=S,h/=256,n-=8);for(u=u<<n|h,c+=n;c>0;e[t+x]=u&255,x+=S,u/=256,c-=8);e[t+x-S]|=vr*128}});var mr=D(_=>{F();"use strict";var J=ir(),R=nr(),or=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;_.Buffer=a;_.SlowBuffer=zr;_.INSPECT_MAX_BYTES=50;var q=2147483647;_.kMaxLength=q;a.TYPED_ARRAY_SUPPORT=qr();!a.TYPED_ARRAY_SUPPORT&&typeof console!="undefined"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function qr(){try{var e=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(e,r),e.foo()===42}catch{return!1}}Object.defineProperty(a.prototype,"parent",{enumerable:!0,get:function(){if(!!a.isBuffer(this))return this.buffer}});Object.defineProperty(a.prototype,"offset",{enumerable:!0,get:function(){if(!!a.isBuffer(this))return this.byteOffset}});function U(e){if(e>q)throw new RangeError('The value "'+e+'" is invalid for option "size"');var r=new Uint8Array(e);return Object.setPrototypeOf(r,a.prototype),r}function a(e,r,t){if(typeof e=="number"){if(typeof r=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return Q(e)}return ur(e,r,t)}a.poolSize=8192;function ur(e,r,t){if(typeof e=="string")return Hr(e,r);if(ArrayBuffer.isView(e))return Xr(e);if(e==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(B(e,ArrayBuffer)||e&&B(e.buffer,ArrayBuffer)||typeof SharedArrayBuffer!="undefined"&&(B(e,SharedArrayBuffer)||e&&B(e.buffer,SharedArrayBuffer)))return K(e,r,t);if(typeof e=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var i=e.valueOf&&e.valueOf();if(i!=null&&i!==e)return a.from(i,r,t);var n=Gr(e);if(n)return n;if(typeof Symbol!="undefined"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]=="function")return a.from(e[Symbol.toPrimitive]("string"),r,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}a.from=function(e,r,t){return ur(e,r,t)};Object.setPrototypeOf(a.prototype,Uint8Array.prototype);Object.setPrototypeOf(a,Uint8Array);function ar(e){if(typeof e!="number")throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Yr(e,r,t){return ar(e),e<=0?U(e):r!==void 0?typeof t=="string"?U(e).fill(r,t):U(e).fill(r):U(e)}a.alloc=function(e,r,t){return Yr(e,r,t)};function Q(e){return ar(e),U(e<0?0:O(e)|0)}a.allocUnsafe=function(e){return Q(e)};a.allocUnsafeSlow=function(e){return Q(e)};function Hr(e,r){if((typeof r!="string"||r==="")&&(r="utf8"),!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var t=hr(e,r)|0,i=U(t),n=i.write(e,r);return n!==t&&(i=i.slice(0,n)),i}function V(e){for(var r=e.length<0?0:O(e.length)|0,t=U(r),i=0;i<r;i+=1)t[i]=e[i]&255;return t}function Xr(e){if(B(e,Uint8Array)){var r=new Uint8Array(e);return K(r.buffer,r.byteOffset,r.byteLength)}return V(e)}function K(e,r,t){if(r<0||e.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<r+(t||0))throw new RangeError('"length" is outside of buffer bounds');var i;return r===void 0&&t===void 0?i=new Uint8Array(e):t===void 0?i=new Uint8Array(e,r):i=new Uint8Array(e,r,t),Object.setPrototypeOf(i,a.prototype),i}function Gr(e){if(a.isBuffer(e)){var r=O(e.length)|0,t=U(r);return t.length===0||e.copy(t,0,0,r),t}if(e.length!==void 0)return typeof e.length!="number"||$(e.length)?U(0):V(e);if(e.type==="Buffer"&&Array.isArray(e.data))return V(e.data)}function O(e){if(e>=q)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+q.toString(16)+" bytes");return e|0}function zr(e){return+e!=e&&(e=0),a.alloc(+e)}a.isBuffer=function(r){return r!=null&&r._isBuffer===!0&&r!==a.prototype};a.compare=function(r,t){if(B(r,Uint8Array)&&(r=a.from(r,r.offset,r.byteLength)),B(t,Uint8Array)&&(t=a.from(t,t.offset,t.byteLength)),!a.isBuffer(r)||!a.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(r===t)return 0;for(var i=r.length,n=t.length,o=0,u=Math.min(i,n);o<u;++o)if(r[o]!==t[o]){i=r[o],n=t[o];break}return i<n?-1:n<i?1:0};a.isEncoding=function(r){switch(String(r).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}};a.concat=function(r,t){if(!Array.isArray(r))throw new TypeError('"list" argument must be an Array of Buffers');if(r.length===0)return a.alloc(0);var i;if(t===void 0)for(t=0,i=0;i<r.length;++i)t+=r[i].length;var n=a.allocUnsafe(t),o=0;for(i=0;i<r.length;++i){var u=r[i];if(B(u,Uint8Array))o+u.length>n.length?a.from(u).copy(n,o):Uint8Array.prototype.set.call(n,u,o);else if(a.isBuffer(u))u.copy(n,o);else throw new TypeError('"list" argument must be an Array of Buffers');o+=u.length}return n};function hr(e,r){if(a.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||B(e,ArrayBuffer))return e.byteLength;if(typeof e!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var t=e.length,i=arguments.length>2&&arguments[2]===!0;if(!i&&t===0)return 0;for(var n=!1;;)switch(r){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return Z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return xr(e).length;default:if(n)return i?-1:Z(e).length;r=(""+r).toLowerCase(),n=!0}}a.byteLength=hr;function Jr(e,r,t){var i=!1;if((r===void 0||r<0)&&(r=0),r>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,r>>>=0,t<=r))return"";for(e||(e="utf8");;)switch(e){case"hex":return tt(this,r,t);case"utf8":case"utf-8":return cr(this,r,t);case"ascii":return Pr(this,r,t);case"latin1":case"binary":return rt(this,r,t);case"base64":return $r(this,r,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return et(this,r,t);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}a.prototype._isBuffer=!0;function C(e,r,t){var i=e[r];e[r]=e[t],e[t]=i}a.prototype.swap16=function(){var r=this.length;if(r%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<r;t+=2)C(this,t,t+1);return this};a.prototype.swap32=function(){var r=this.length;if(r%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<r;t+=4)C(this,t,t+3),C(this,t+1,t+2);return this};a.prototype.swap64=function(){var r=this.length;if(r%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<r;t+=8)C(this,t,t+7),C(this,t+1,t+6),C(this,t+2,t+5),C(this,t+3,t+4);return this};a.prototype.toString=function(){var r=this.length;return r===0?"":arguments.length===0?cr(this,0,r):Jr.apply(this,arguments)};a.prototype.toLocaleString=a.prototype.toString;a.prototype.equals=function(r){if(!a.isBuffer(r))throw new TypeError("Argument must be a Buffer");return this===r?!0:a.compare(this,r)===0};a.prototype.inspect=function(){var r="",t=_.INSPECT_MAX_BYTES;return r=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(r+=" ... "),"<Buffer "+r+">"};or&&(a.prototype[or]=a.prototype.inspect);a.prototype.compare=function(r,t,i,n,o){if(B(r,Uint8Array)&&(r=a.from(r,r.offset,r.byteLength)),!a.isBuffer(r))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof r);if(t===void 0&&(t=0),i===void 0&&(i=r?r.length:0),n===void 0&&(n=0),o===void 0&&(o=this.length),t<0||i>r.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=i)return 0;if(n>=o)return-1;if(t>=i)return 1;if(t>>>=0,i>>>=0,n>>>=0,o>>>=0,this===r)return 0;for(var u=o-n,h=i-t,f=Math.min(u,h),c=this.slice(n,o),l=r.slice(t,i),p=0;p<f;++p)if(c[p]!==l[p]){u=c[p],h=l[p];break}return u<h?-1:h<u?1:0};function fr(e,r,t,i,n){if(e.length===0)return-1;if(typeof t=="string"?(i=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,$(t)&&(t=n?0:e.length-1),t<0&&(t=e.length+t),t>=e.length){if(n)return-1;t=e.length-1}else if(t<0)if(n)t=0;else return-1;if(typeof r=="string"&&(r=a.from(r,i)),a.isBuffer(r))return r.length===0?-1:pr(e,r,t,i,n);if(typeof r=="number")return r=r&255,typeof Uint8Array.prototype.indexOf=="function"?n?Uint8Array.prototype.indexOf.call(e,r,t):Uint8Array.prototype.lastIndexOf.call(e,r,t):pr(e,[r],t,i,n);throw new TypeError("val must be string, number or Buffer")}function pr(e,r,t,i,n){var o=1,u=e.length,h=r.length;if(i!==void 0&&(i=String(i).toLowerCase(),i==="ucs2"||i==="ucs-2"||i==="utf16le"||i==="utf-16le")){if(e.length<2||r.length<2)return-1;o=2,u/=2,h/=2,t/=2}function f(x,S){return o===1?x[S]:x.readUInt16BE(S*o)}var c;if(n){var l=-1;for(c=t;c<u;c++)if(f(e,c)===f(r,l===-1?0:c-l)){if(l===-1&&(l=c),c-l+1===h)return l*o}else l!==-1&&(c-=c-l),l=-1}else for(t+h>u&&(t=u-h),c=t;c>=0;c--){for(var p=!0,E=0;E<h;E++)if(f(e,c+E)!==f(r,E)){p=!1;break}if(p)return c}return-1}a.prototype.includes=function(r,t,i){return this.indexOf(r,t,i)!==-1};a.prototype.indexOf=function(r,t,i){return fr(this,r,t,i,!0)};a.prototype.lastIndexOf=function(r,t,i){return fr(this,r,t,i,!1)};function Qr(e,r,t,i){t=Number(t)||0;var n=e.length-t;i?(i=Number(i),i>n&&(i=n)):i=n;var o=r.length;i>o/2&&(i=o/2);for(var u=0;u<i;++u){var h=parseInt(r.substr(u*2,2),16);if($(h))return u;e[t+u]=h}return u}function Vr(e,r,t,i){return Y(Z(r,e.length-t),e,t,i)}function Kr(e,r,t,i){return Y(ot(r),e,t,i)}function Or(e,r,t,i){return Y(xr(r),e,t,i)}function Zr(e,r,t,i){return Y(ut(r,e.length-t),e,t,i)}a.prototype.write=function(r,t,i,n){if(t===void 0)n="utf8",i=this.length,t=0;else if(i===void 0&&typeof t=="string")n=t,i=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(i)?(i=i>>>0,n===void 0&&(n="utf8")):(n=i,i=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var o=this.length-t;if((i===void 0||i>o)&&(i=o),r.length>0&&(i<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var u=!1;;)switch(n){case"hex":return Qr(this,r,t,i);case"utf8":case"utf-8":return Vr(this,r,t,i);case"ascii":case"latin1":case"binary":return Kr(this,r,t,i);case"base64":return Or(this,r,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Zr(this,r,t,i);default:if(u)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),u=!0}};a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function $r(e,r,t){return r===0&&t===e.length?J.fromByteArray(e):J.fromByteArray(e.slice(r,t))}function cr(e,r,t){t=Math.min(e.length,t);for(var i=[],n=r;n<t;){var o=e[n],u=null,h=o>239?4:o>223?3:o>191?2:1;if(n+h<=t){var f,c,l,p;switch(h){case 1:o<128&&(u=o);break;case 2:f=e[n+1],(f&192)==128&&(p=(o&31)<<6|f&63,p>127&&(u=p));break;case 3:f=e[n+1],c=e[n+2],(f&192)==128&&(c&192)==128&&(p=(o&15)<<12|(f&63)<<6|c&63,p>2047&&(p<55296||p>57343)&&(u=p));break;case 4:f=e[n+1],c=e[n+2],l=e[n+3],(f&192)==128&&(c&192)==128&&(l&192)==128&&(p=(o&15)<<18|(f&63)<<12|(c&63)<<6|l&63,p>65535&&p<1114112&&(u=p))}}u===null?(u=65533,h=1):u>65535&&(u-=65536,i.push(u>>>10&1023|55296),u=56320|u&1023),i.push(u),n+=h}return jr(i)}var lr=4096;function jr(e){var r=e.length;if(r<=lr)return String.fromCharCode.apply(String,e);for(var t="",i=0;i<r;)t+=String.fromCharCode.apply(String,e.slice(i,i+=lr));return t}function Pr(e,r,t){var i="";t=Math.min(e.length,t);for(var n=r;n<t;++n)i+=String.fromCharCode(e[n]&127);return i}function rt(e,r,t){var i="";t=Math.min(e.length,t);for(var n=r;n<t;++n)i+=String.fromCharCode(e[n]);return i}function tt(e,r,t){var i=e.length;(!r||r<0)&&(r=0),(!t||t<0||t>i)&&(t=i);for(var n="",o=r;o<t;++o)n+=at[e[o]];return n}function et(e,r,t){for(var i=e.slice(r,t),n="",o=0;o<i.length-1;o+=2)n+=String.fromCharCode(i[o]+i[o+1]*256);return n}a.prototype.slice=function(r,t){var i=this.length;r=~~r,t=t===void 0?i:~~t,r<0?(r+=i,r<0&&(r=0)):r>i&&(r=i),t<0?(t+=i,t<0&&(t=0)):t>i&&(t=i),t<r&&(t=r);var n=this.subarray(r,t);return Object.setPrototypeOf(n,a.prototype),n};function w(e,r,t){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+r>t)throw new RangeError("Trying to access beyond buffer length")}a.prototype.readUintLE=a.prototype.readUIntLE=function(r,t,i){r=r>>>0,t=t>>>0,i||w(r,t,this.length);for(var n=this[r],o=1,u=0;++u<t&&(o*=256);)n+=this[r+u]*o;return n};a.prototype.readUintBE=a.prototype.readUIntBE=function(r,t,i){r=r>>>0,t=t>>>0,i||w(r,t,this.length);for(var n=this[r+--t],o=1;t>0&&(o*=256);)n+=this[r+--t]*o;return n};a.prototype.readUint8=a.prototype.readUInt8=function(r,t){return r=r>>>0,t||w(r,1,this.length),this[r]};a.prototype.readUint16LE=a.prototype.readUInt16LE=function(r,t){return r=r>>>0,t||w(r,2,this.length),this[r]|this[r+1]<<8};a.prototype.readUint16BE=a.prototype.readUInt16BE=function(r,t){return r=r>>>0,t||w(r,2,this.length),this[r]<<8|this[r+1]};a.prototype.readUint32LE=a.prototype.readUInt32LE=function(r,t){return r=r>>>0,t||w(r,4,this.length),(this[r]|this[r+1]<<8|this[r+2]<<16)+this[r+3]*16777216};a.prototype.readUint32BE=a.prototype.readUInt32BE=function(r,t){return r=r>>>0,t||w(r,4,this.length),this[r]*16777216+(this[r+1]<<16|this[r+2]<<8|this[r+3])};a.prototype.readIntLE=function(r,t,i){r=r>>>0,t=t>>>0,i||w(r,t,this.length);for(var n=this[r],o=1,u=0;++u<t&&(o*=256);)n+=this[r+u]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*t)),n};a.prototype.readIntBE=function(r,t,i){r=r>>>0,t=t>>>0,i||w(r,t,this.length);for(var n=t,o=1,u=this[r+--n];n>0&&(o*=256);)u+=this[r+--n]*o;return o*=128,u>=o&&(u-=Math.pow(2,8*t)),u};a.prototype.readInt8=function(r,t){return r=r>>>0,t||w(r,1,this.length),this[r]&128?(255-this[r]+1)*-1:this[r]};a.prototype.readInt16LE=function(r,t){r=r>>>0,t||w(r,2,this.length);var i=this[r]|this[r+1]<<8;return i&32768?i|4294901760:i};a.prototype.readInt16BE=function(r,t){r=r>>>0,t||w(r,2,this.length);var i=this[r+1]|this[r]<<8;return i&32768?i|4294901760:i};a.prototype.readInt32LE=function(r,t){return r=r>>>0,t||w(r,4,this.length),this[r]|this[r+1]<<8|this[r+2]<<16|this[r+3]<<24};a.prototype.readInt32BE=function(r,t){return r=r>>>0,t||w(r,4,this.length),this[r]<<24|this[r+1]<<16|this[r+2]<<8|this[r+3]};a.prototype.readFloatLE=function(r,t){return r=r>>>0,t||w(r,4,this.length),R.read(this,r,!0,23,4)};a.prototype.readFloatBE=function(r,t){return r=r>>>0,t||w(r,4,this.length),R.read(this,r,!1,23,4)};a.prototype.readDoubleLE=function(r,t){return r=r>>>0,t||w(r,8,this.length),R.read(this,r,!0,52,8)};a.prototype.readDoubleBE=function(r,t){return r=r>>>0,t||w(r,8,this.length),R.read(this,r,!1,52,8)};function y(e,r,t,i,n,o){if(!a.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>n||r<o)throw new RangeError('"value" argument is out of bounds');if(t+i>e.length)throw new RangeError("Index out of range")}a.prototype.writeUintLE=a.prototype.writeUIntLE=function(r,t,i,n){if(r=+r,t=t>>>0,i=i>>>0,!n){var o=Math.pow(2,8*i)-1;y(this,r,t,i,o,0)}var u=1,h=0;for(this[t]=r&255;++h<i&&(u*=256);)this[t+h]=r/u&255;return t+i};a.prototype.writeUintBE=a.prototype.writeUIntBE=function(r,t,i,n){if(r=+r,t=t>>>0,i=i>>>0,!n){var o=Math.pow(2,8*i)-1;y(this,r,t,i,o,0)}var u=i-1,h=1;for(this[t+u]=r&255;--u>=0&&(h*=256);)this[t+u]=r/h&255;return t+i};a.prototype.writeUint8=a.prototype.writeUInt8=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,1,255,0),this[t]=r&255,t+1};a.prototype.writeUint16LE=a.prototype.writeUInt16LE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,2,65535,0),this[t]=r&255,this[t+1]=r>>>8,t+2};a.prototype.writeUint16BE=a.prototype.writeUInt16BE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,2,65535,0),this[t]=r>>>8,this[t+1]=r&255,t+2};a.prototype.writeUint32LE=a.prototype.writeUInt32LE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,4,4294967295,0),this[t+3]=r>>>24,this[t+2]=r>>>16,this[t+1]=r>>>8,this[t]=r&255,t+4};a.prototype.writeUint32BE=a.prototype.writeUInt32BE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,4,4294967295,0),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4};a.prototype.writeIntLE=function(r,t,i,n){if(r=+r,t=t>>>0,!n){var o=Math.pow(2,8*i-1);y(this,r,t,i,o-1,-o)}var u=0,h=1,f=0;for(this[t]=r&255;++u<i&&(h*=256);)r<0&&f===0&&this[t+u-1]!==0&&(f=1),this[t+u]=(r/h>>0)-f&255;return t+i};a.prototype.writeIntBE=function(r,t,i,n){if(r=+r,t=t>>>0,!n){var o=Math.pow(2,8*i-1);y(this,r,t,i,o-1,-o)}var u=i-1,h=1,f=0;for(this[t+u]=r&255;--u>=0&&(h*=256);)r<0&&f===0&&this[t+u+1]!==0&&(f=1),this[t+u]=(r/h>>0)-f&255;return t+i};a.prototype.writeInt8=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,1,127,-128),r<0&&(r=255+r+1),this[t]=r&255,t+1};a.prototype.writeInt16LE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,2,32767,-32768),this[t]=r&255,this[t+1]=r>>>8,t+2};a.prototype.writeInt16BE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,2,32767,-32768),this[t]=r>>>8,this[t+1]=r&255,t+2};a.prototype.writeInt32LE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,4,2147483647,-2147483648),this[t]=r&255,this[t+1]=r>>>8,this[t+2]=r>>>16,this[t+3]=r>>>24,t+4};a.prototype.writeInt32BE=function(r,t,i){return r=+r,t=t>>>0,i||y(this,r,t,4,2147483647,-2147483648),r<0&&(r=4294967295+r+1),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4};function sr(e,r,t,i,n,o){if(t+i>e.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function wr(e,r,t,i,n){return r=+r,t=t>>>0,n||sr(e,r,t,4,34028234663852886e22,-34028234663852886e22),R.write(e,r,t,i,23,4),t+4}a.prototype.writeFloatLE=function(r,t,i){return wr(this,r,t,!0,i)};a.prototype.writeFloatBE=function(r,t,i){return wr(this,r,t,!1,i)};function yr(e,r,t,i,n){return r=+r,t=t>>>0,n||sr(e,r,t,8,17976931348623157e292,-17976931348623157e292),R.write(e,r,t,i,52,8),t+8}a.prototype.writeDoubleLE=function(r,t,i){return yr(this,r,t,!0,i)};a.prototype.writeDoubleBE=function(r,t,i){return yr(this,r,t,!1,i)};a.prototype.copy=function(r,t,i,n){if(!a.isBuffer(r))throw new TypeError("argument should be a Buffer");if(i||(i=0),!n&&n!==0&&(n=this.length),t>=r.length&&(t=r.length),t||(t=0),n>0&&n<i&&(n=i),n===i||r.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),r.length-t<n-i&&(n=r.length-t+i);var o=n-i;return this===r&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(t,i,n):Uint8Array.prototype.set.call(r,this.subarray(i,n),t),o};a.prototype.fill=function(r,t,i,n){if(typeof r=="string"){if(typeof t=="string"?(n=t,t=0,i=this.length):typeof i=="string"&&(n=i,i=this.length),n!==void 0&&typeof n!="string")throw new TypeError("encoding must be a string");if(typeof n=="string"&&!a.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(r.length===1){var o=r.charCodeAt(0);(n==="utf8"&&o<128||n==="latin1")&&(r=o)}}else typeof r=="number"?r=r&255:typeof r=="boolean"&&(r=Number(r));if(t<0||this.length<t||this.length<i)throw new RangeError("Out of range index");if(i<=t)return this;t=t>>>0,i=i===void 0?this.length:i>>>0,r||(r=0);var u;if(typeof r=="number")for(u=t;u<i;++u)this[u]=r;else{var h=a.isBuffer(r)?r:a.from(r,n),f=h.length;if(f===0)throw new TypeError('The value "'+r+'" is invalid for argument "value"');for(u=0;u<i-t;++u)this[u+t]=h[u%f]}return this};var it=/[^+/0-9A-Za-z-_]/g;function nt(e){if(e=e.split("=")[0],e=e.trim().replace(it,""),e.length<2)return"";for(;e.length%4!=0;)e=e+"=";return e}function Z(e,r){r=r||1/0;for(var t,i=e.length,n=null,o=[],u=0;u<i;++u){if(t=e.charCodeAt(u),t>55295&&t<57344){if(!n){if(t>56319){(r-=3)>-1&&o.push(239,191,189);continue}else if(u+1===i){(r-=3)>-1&&o.push(239,191,189);continue}n=t;continue}if(t<56320){(r-=3)>-1&&o.push(239,191,189),n=t;continue}t=(n-55296<<10|t-56320)+65536}else n&&(r-=3)>-1&&o.push(239,191,189);if(n=null,t<128){if((r-=1)<0)break;o.push(t)}else if(t<2048){if((r-=2)<0)break;o.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;o.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;o.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return o}function ot(e){for(var r=[],t=0;t<e.length;++t)r.push(e.charCodeAt(t)&255);return r}function ut(e,r){for(var t,i,n,o=[],u=0;u<e.length&&!((r-=2)<0);++u)t=e.charCodeAt(u),i=t>>8,n=t%256,o.push(n),o.push(i);return o}function xr(e){return J.toByteArray(nt(e))}function Y(e,r,t,i){for(var n=0;n<i&&!(n+t>=r.length||n>=e.length);++n)r[n+t]=e[n];return n}function B(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function $(e){return e!==e}var at=function(){for(var e="0123456789abcdef",r=new Array(256),t=0;t<16;++t)for(var i=t*16,n=0;n<16;++n)r[i+n]=e[t]+e[n];return r}()});var Ar=D((wt,Br)=>{F();var s=Br.exports={},A,v;function j(){throw new Error("setTimeout has not been defined")}function P(){throw new Error("clearTimeout has not been defined")}(function(){try{typeof setTimeout=="function"?A=setTimeout:A=j}catch{A=j}try{typeof clearTimeout=="function"?v=clearTimeout:v=P}catch{v=P}})();function Er(e){if(A===setTimeout)return setTimeout(e,0);if((A===j||!A)&&setTimeout)return A=setTimeout,setTimeout(e,0);try{return A(e,0)}catch{try{return A.call(null,e,0)}catch{return A.call(this,e,0)}}}function ht(e){if(v===clearTimeout)return clearTimeout(e);if((v===P||!v)&&clearTimeout)return v=clearTimeout,clearTimeout(e);try{return v(e)}catch{try{return v.call(null,e)}catch{return v.call(this,e)}}}var T=[],M=!1,L,H=-1;function ft(){!M||!L||(M=!1,L.length?T=L.concat(T):H=-1,T.length&&Fr())}function Fr(){if(!M){var e=Er(ft);M=!0;for(var r=T.length;r;){for(L=T,T=[];++H<r;)L&&L[H].run();H=-1,r=T.length}L=null,M=!1,ht(e)}}s.nextTick=function(e){var r=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)r[t-1]=arguments[t];T.push(new gr(e,r)),T.length===1&&!M&&Er(Fr)};function gr(e,r){this.fun=e,this.array=r}gr.prototype.run=function(){this.fun.apply(null,this.array)};s.title="browser";s.browser=!0;s.env={};s.argv=[];s.version="";s.versions={};function I(){}s.on=I;s.addListener=I;s.once=I;s.off=I;s.removeListener=I;s.removeAllListeners=I;s.emit=I;s.prependListener=I;s.prependOnceListener=I;s.listeners=function(e){return[]};s.binding=function(e){throw new Error("process.binding is not supported")};s.cwd=function(){return"/"};s.chdir=function(e){throw new Error("process.chdir is not supported")};s.umask=function(){return 0}});var k,b,yt,F=Sr(()=>{k=rr(mr()),b=rr(Ar()),yt=function(e){function r(){var i=this||self;return delete e.prototype.__magic__,i}if(typeof globalThis=="object")return globalThis;if(this)return r();e.defineProperty(e.prototype,"__magic__",{configurable:!0,get:r});var t=__magic__;return t}(Object)});F();chrome.action.onClicked.addListener(()=>{chrome.tabs.query({currentWindow:!0,active:!0},function(e){let r=e[0];if(r&&r.id&&r.url){let t=r.url.startsWith("chrome:")?"":encodeURIComponent(r.url);chrome.tabs.update(r.id,{url:`index.html#${t}`})}else chrome.tabs.create({url:"index.html"})})});})();
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=data:application/json;base64,
