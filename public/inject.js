(()=>{var qr=Object.create;var G=Object.defineProperty;var Kr=Object.getOwnPropertyDescriptor;var Yr=Object.getOwnPropertyNames;var Hr=Object.getPrototypeOf,Xr=Object.prototype.hasOwnProperty;var Gr=t=>G(t,"__esModule",{value:!0});var zr=(t,r)=>()=>(t&&(r=t(t=0)),r);var W=(t,r)=>()=>(r||t((r={exports:{}}).exports,r),r.exports);var Jr=(t,r,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of Yr(r))!Xr.call(t,n)&&n!=="default"&&G(t,n,{get:()=>r[n],enumerable:!(e=Kr(r,n))||e.enumerable});return t},z=t=>Jr(Gr(G(t!=null?qr(Hr(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var hr=W(j=>{m();"use strict";j.byteLength=Vr;j.toByteArray=$r;j.fromByteArray=te;var E=[],g=[],Qr=typeof Uint8Array!="undefined"?Uint8Array:Array,J="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(U=0,sr=J.length;U<sr;++U)E[U]=J[U],g[J.charCodeAt(U)]=U;var U,sr;g["-".charCodeAt(0)]=62;g["_".charCodeAt(0)]=63;function fr(t){var r=t.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=t.indexOf("=");e===-1&&(e=r);var n=e===r?0:4-e%4;return[e,n]}function Vr(t){var r=fr(t),e=r[0],n=r[1];return(e+n)*3/4-n}function Zr(t,r,e){return(r+e)*3/4-e}function $r(t){var r,e=fr(t),n=e[0],i=e[1],u=new Qr(Zr(t,n,i)),o=0,s=i>0?n-4:n,f;for(f=0;f<s;f+=4)r=g[t.charCodeAt(f)]<<18|g[t.charCodeAt(f+1)]<<12|g[t.charCodeAt(f+2)]<<6|g[t.charCodeAt(f+3)],u[o++]=r>>16&255,u[o++]=r>>8&255,u[o++]=r&255;return i===2&&(r=g[t.charCodeAt(f)]<<2|g[t.charCodeAt(f+1)]>>4,u[o++]=r&255),i===1&&(r=g[t.charCodeAt(f)]<<10|g[t.charCodeAt(f+1)]<<4|g[t.charCodeAt(f+2)]>>2,u[o++]=r>>8&255,u[o++]=r&255),u}function re(t){return E[t>>18&63]+E[t>>12&63]+E[t>>6&63]+E[t&63]}function ee(t,r,e){for(var n,i=[],u=r;u<e;u+=3)n=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(t[u+2]&255),i.push(re(n));return i.join("")}function te(t){for(var r,e=t.length,n=e%3,i=[],u=16383,o=0,s=e-n;o<s;o+=u)i.push(ee(t,o,o+u>s?s:o+u));return n===1?(r=t[e-1],i.push(E[r>>2]+E[r<<4&63]+"==")):n===2&&(r=(t[e-2]<<8)+t[e-1],i.push(E[r>>10]+E[r>>4&63]+E[r<<2&63]+"=")),i.join("")}});var pr=W(Q=>{m();Q.read=function(t,r,e,n,i){var u,o,s=i*8-n-1,f=(1<<s)-1,p=f>>1,c=-7,h=e?i-1:0,v=e?-1:1,d=t[r+h];for(h+=v,u=d&(1<<-c)-1,d>>=-c,c+=s;c>0;u=u*256+t[r+h],h+=v,c-=8);for(o=u&(1<<-c)-1,u>>=-c,c+=n;c>0;o=o*256+t[r+h],h+=v,c-=8);if(u===0)u=1-p;else{if(u===f)return o?NaN:(d?-1:1)*(1/0);o=o+Math.pow(2,n),u=u-p}return(d?-1:1)*o*Math.pow(2,u-n)};Q.write=function(t,r,e,n,i,u){var o,s,f,p=u*8-i-1,c=(1<<p)-1,h=c>>1,v=i===23?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:u-1,R=n?1:-1,Pr=r<0||r===0&&1/r<0?1:0;for(r=Math.abs(r),isNaN(r)||r===1/0?(s=isNaN(r)?1:0,o=c):(o=Math.floor(Math.log(r)/Math.LN2),r*(f=Math.pow(2,-o))<1&&(o--,f*=2),o+h>=1?r+=v/f:r+=v*Math.pow(2,1-h),r*f>=2&&(o++,f/=2),o+h>=c?(s=0,o=c):o+h>=1?(s=(r*f-1)*Math.pow(2,i),o=o+h):(s=r*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;t[e+d]=s&255,d+=R,s/=256,i-=8);for(o=o<<i|s,p+=i;p>0;t[e+d]=o&255,d+=R,o/=256,p-=8);t[e+d-R]|=Pr*128}});var Br=W(k=>{m();"use strict";var V=hr(),N=pr(),cr=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;k.Buffer=a;k.SlowBuffer=se;k.INSPECT_MAX_BYTES=50;var P=2147483647;k.kMaxLength=P;a.TYPED_ARRAY_SUPPORT=ne();!a.TYPED_ARRAY_SUPPORT&&typeof console!="undefined"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function ne(){try{var t=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(t,r),t.foo()===42}catch{return!1}}Object.defineProperty(a.prototype,"parent",{enumerable:!0,get:function(){if(!!a.isBuffer(this))return this.buffer}});Object.defineProperty(a.prototype,"offset",{enumerable:!0,get:function(){if(!!a.isBuffer(this))return this.byteOffset}});function L(t){if(t>P)throw new RangeError('The value "'+t+'" is invalid for option "size"');var r=new Uint8Array(t);return Object.setPrototypeOf(r,a.prototype),r}function a(t,r,e){if(typeof t=="number"){if(typeof r=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return Z(t)}return lr(t,r,e)}a.poolSize=8192;function lr(t,r,e){if(typeof t=="string")return oe(t,r);if(ArrayBuffer.isView(t))return ue(t);if(t==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(F(t,ArrayBuffer)||t&&F(t.buffer,ArrayBuffer)||typeof SharedArrayBuffer!="undefined"&&(F(t,SharedArrayBuffer)||t&&F(t.buffer,SharedArrayBuffer)))return rr(t,r,e);if(typeof t=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(n!=null&&n!==t)return a.from(n,r,e);var i=ae(t);if(i)return i;if(typeof Symbol!="undefined"&&Symbol.toPrimitive!=null&&typeof t[Symbol.toPrimitive]=="function")return a.from(t[Symbol.toPrimitive]("string"),r,e);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}a.from=function(t,r,e){return lr(t,r,e)};Object.setPrototypeOf(a.prototype,Uint8Array.prototype);Object.setPrototypeOf(a,Uint8Array);function wr(t){if(typeof t!="number")throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function ie(t,r,e){return wr(t),t<=0?L(t):r!==void 0?typeof e=="string"?L(t).fill(r,e):L(t).fill(r):L(t)}a.alloc=function(t,r,e){return ie(t,r,e)};function Z(t){return wr(t),L(t<0?0:er(t)|0)}a.allocUnsafe=function(t){return Z(t)};a.allocUnsafeSlow=function(t){return Z(t)};function oe(t,r){if((typeof r!="string"||r==="")&&(r="utf8"),!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var e=yr(t,r)|0,n=L(e),i=n.write(t,r);return i!==e&&(n=n.slice(0,i)),n}function $(t){for(var r=t.length<0?0:er(t.length)|0,e=L(r),n=0;n<r;n+=1)e[n]=t[n]&255;return e}function ue(t){if(F(t,Uint8Array)){var r=new Uint8Array(t);return rr(r.buffer,r.byteOffset,r.byteLength)}return $(t)}function rr(t,r,e){if(r<0||t.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<r+(e||0))throw new RangeError('"length" is outside of buffer bounds');var n;return r===void 0&&e===void 0?n=new Uint8Array(t):e===void 0?n=new Uint8Array(t,r):n=new Uint8Array(t,r,e),Object.setPrototypeOf(n,a.prototype),n}function ae(t){if(a.isBuffer(t)){var r=er(t.length)|0,e=L(r);return e.length===0||t.copy(e,0,0,r),e}if(t.length!==void 0)return typeof t.length!="number"||nr(t.length)?L(0):$(t);if(t.type==="Buffer"&&Array.isArray(t.data))return $(t.data)}function er(t){if(t>=P)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+P.toString(16)+" bytes");return t|0}function se(t){return+t!=t&&(t=0),a.alloc(+t)}a.isBuffer=function(r){return r!=null&&r._isBuffer===!0&&r!==a.prototype};a.compare=function(r,e){if(F(r,Uint8Array)&&(r=a.from(r,r.offset,r.byteLength)),F(e,Uint8Array)&&(e=a.from(e,e.offset,e.byteLength)),!a.isBuffer(r)||!a.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(r===e)return 0;for(var n=r.length,i=e.length,u=0,o=Math.min(n,i);u<o;++u)if(r[u]!==e[u]){n=r[u],i=e[u];break}return n<i?-1:i<n?1:0};a.isEncoding=function(r){switch(String(r).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}};a.concat=function(r,e){if(!Array.isArray(r))throw new TypeError('"list" argument must be an Array of Buffers');if(r.length===0)return a.alloc(0);var n;if(e===void 0)for(e=0,n=0;n<r.length;++n)e+=r[n].length;var i=a.allocUnsafe(e),u=0;for(n=0;n<r.length;++n){var o=r[n];if(F(o,Uint8Array))u+o.length>i.length?a.from(o).copy(i,u):Uint8Array.prototype.set.call(i,o,u);else if(a.isBuffer(o))o.copy(i,u);else throw new TypeError('"list" argument must be an Array of Buffers');u+=o.length}return i};function yr(t,r){if(a.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||F(t,ArrayBuffer))return t.byteLength;if(typeof t!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var e=t.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&e===0)return 0;for(var i=!1;;)switch(r){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":return tr(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return e*2;case"hex":return e>>>1;case"base64":return Ar(t).length;default:if(i)return n?-1:tr(t).length;r=(""+r).toLowerCase(),i=!0}}a.byteLength=yr;function fe(t,r,e){var n=!1;if((r===void 0||r<0)&&(r=0),r>this.length||((e===void 0||e>this.length)&&(e=this.length),e<=0)||(e>>>=0,r>>>=0,e<=r))return"";for(t||(t="utf8");;)switch(t){case"hex":return de(this,r,e);case"utf8":case"utf-8":return vr(this,r,e);case"ascii":return xe(this,r,e);case"latin1":case"binary":return ve(this,r,e);case"base64":return ye(this,r,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ge(this,r,e);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}a.prototype._isBuffer=!0;function C(t,r,e){var n=t[r];t[r]=t[e],t[e]=n}a.prototype.swap16=function(){var r=this.length;if(r%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<r;e+=2)C(this,e,e+1);return this};a.prototype.swap32=function(){var r=this.length;if(r%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<r;e+=4)C(this,e,e+3),C(this,e+1,e+2);return this};a.prototype.swap64=function(){var r=this.length;if(r%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<r;e+=8)C(this,e,e+7),C(this,e+1,e+6),C(this,e+2,e+5),C(this,e+3,e+4);return this};a.prototype.toString=function(){var r=this.length;return r===0?"":arguments.length===0?vr(this,0,r):fe.apply(this,arguments)};a.prototype.toLocaleString=a.prototype.toString;a.prototype.equals=function(r){if(!a.isBuffer(r))throw new TypeError("Argument must be a Buffer");return this===r?!0:a.compare(this,r)===0};a.prototype.inspect=function(){var r="",e=k.INSPECT_MAX_BYTES;return r=this.toString("hex",0,e).replace(/(.{2})/g,"$1 ").trim(),this.length>e&&(r+=" ... "),"<Buffer "+r+">"};cr&&(a.prototype[cr]=a.prototype.inspect);a.prototype.compare=function(r,e,n,i,u){if(F(r,Uint8Array)&&(r=a.from(r,r.offset,r.byteLength)),!a.isBuffer(r))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof r);if(e===void 0&&(e=0),n===void 0&&(n=r?r.length:0),i===void 0&&(i=0),u===void 0&&(u=this.length),e<0||n>r.length||i<0||u>this.length)throw new RangeError("out of range index");if(i>=u&&e>=n)return 0;if(i>=u)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,i>>>=0,u>>>=0,this===r)return 0;for(var o=u-i,s=n-e,f=Math.min(o,s),p=this.slice(i,u),c=r.slice(e,n),h=0;h<f;++h)if(p[h]!==c[h]){o=p[h],s=c[h];break}return o<s?-1:s<o?1:0};function mr(t,r,e,n,i){if(t.length===0)return-1;if(typeof e=="string"?(n=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,nr(e)&&(e=i?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(i)return-1;e=t.length-1}else if(e<0)if(i)e=0;else return-1;if(typeof r=="string"&&(r=a.from(r,n)),a.isBuffer(r))return r.length===0?-1:xr(t,r,e,n,i);if(typeof r=="number")return r=r&255,typeof Uint8Array.prototype.indexOf=="function"?i?Uint8Array.prototype.indexOf.call(t,r,e):Uint8Array.prototype.lastIndexOf.call(t,r,e):xr(t,[r],e,n,i);throw new TypeError("val must be string, number or Buffer")}function xr(t,r,e,n,i){var u=1,o=t.length,s=r.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(t.length<2||r.length<2)return-1;u=2,o/=2,s/=2,e/=2}function f(d,R){return u===1?d[R]:d.readUInt16BE(R*u)}var p;if(i){var c=-1;for(p=e;p<o;p++)if(f(t,p)===f(r,c===-1?0:p-c)){if(c===-1&&(c=p),p-c+1===s)return c*u}else c!==-1&&(p-=p-c),c=-1}else for(e+s>o&&(e=o-s),p=e;p>=0;p--){for(var h=!0,v=0;v<s;v++)if(f(t,p+v)!==f(r,v)){h=!1;break}if(h)return p}return-1}a.prototype.includes=function(r,e,n){return this.indexOf(r,e,n)!==-1};a.prototype.indexOf=function(r,e,n){return mr(this,r,e,n,!0)};a.prototype.lastIndexOf=function(r,e,n){return mr(this,r,e,n,!1)};function he(t,r,e,n){e=Number(e)||0;var i=t.length-e;n?(n=Number(n),n>i&&(n=i)):n=i;var u=r.length;n>u/2&&(n=u/2);for(var o=0;o<n;++o){var s=parseInt(r.substr(o*2,2),16);if(nr(s))return o;t[e+o]=s}return o}function pe(t,r,e,n){return q(tr(r,t.length-e),t,e,n)}function ce(t,r,e,n){return q(Ae(r),t,e,n)}function le(t,r,e,n){return q(Ar(r),t,e,n)}function we(t,r,e,n){return q(Be(r,t.length-e),t,e,n)}a.prototype.write=function(r,e,n,i){if(e===void 0)i="utf8",n=this.length,e=0;else if(n===void 0&&typeof e=="string")i=e,n=this.length,e=0;else if(isFinite(e))e=e>>>0,isFinite(n)?(n=n>>>0,i===void 0&&(i="utf8")):(i=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var u=this.length-e;if((n===void 0||n>u)&&(n=u),r.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return he(this,r,e,n);case"utf8":case"utf-8":return pe(this,r,e,n);case"ascii":case"latin1":case"binary":return ce(this,r,e,n);case"base64":return le(this,r,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return we(this,r,e,n);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}};a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function ye(t,r,e){return r===0&&e===t.length?V.fromByteArray(t):V.fromByteArray(t.slice(r,e))}function vr(t,r,e){e=Math.min(t.length,e);for(var n=[],i=r;i<e;){var u=t[i],o=null,s=u>239?4:u>223?3:u>191?2:1;if(i+s<=e){var f,p,c,h;switch(s){case 1:u<128&&(o=u);break;case 2:f=t[i+1],(f&192)==128&&(h=(u&31)<<6|f&63,h>127&&(o=h));break;case 3:f=t[i+1],p=t[i+2],(f&192)==128&&(p&192)==128&&(h=(u&15)<<12|(f&63)<<6|p&63,h>2047&&(h<55296||h>57343)&&(o=h));break;case 4:f=t[i+1],p=t[i+2],c=t[i+3],(f&192)==128&&(p&192)==128&&(c&192)==128&&(h=(u&15)<<18|(f&63)<<12|(p&63)<<6|c&63,h>65535&&h<1114112&&(o=h))}}o===null?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|o&1023),n.push(o),i+=s}return me(n)}var dr=4096;function me(t){var r=t.length;if(r<=dr)return String.fromCharCode.apply(String,t);for(var e="",n=0;n<r;)e+=String.fromCharCode.apply(String,t.slice(n,n+=dr));return e}function xe(t,r,e){var n="";e=Math.min(t.length,e);for(var i=r;i<e;++i)n+=String.fromCharCode(t[i]&127);return n}function ve(t,r,e){var n="";e=Math.min(t.length,e);for(var i=r;i<e;++i)n+=String.fromCharCode(t[i]);return n}function de(t,r,e){var n=t.length;(!r||r<0)&&(r=0),(!e||e<0||e>n)&&(e=n);for(var i="",u=r;u<e;++u)i+=Le[t[u]];return i}function ge(t,r,e){for(var n=t.slice(r,e),i="",u=0;u<n.length-1;u+=2)i+=String.fromCharCode(n[u]+n[u+1]*256);return i}a.prototype.slice=function(r,e){var n=this.length;r=~~r,e=e===void 0?n:~~e,r<0?(r+=n,r<0&&(r=0)):r>n&&(r=n),e<0?(e+=n,e<0&&(e=0)):e>n&&(e=n),e<r&&(e=r);var i=this.subarray(r,e);return Object.setPrototypeOf(i,a.prototype),i};function y(t,r,e){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+r>e)throw new RangeError("Trying to access beyond buffer length")}a.prototype.readUintLE=a.prototype.readUIntLE=function(r,e,n){r=r>>>0,e=e>>>0,n||y(r,e,this.length);for(var i=this[r],u=1,o=0;++o<e&&(u*=256);)i+=this[r+o]*u;return i};a.prototype.readUintBE=a.prototype.readUIntBE=function(r,e,n){r=r>>>0,e=e>>>0,n||y(r,e,this.length);for(var i=this[r+--e],u=1;e>0&&(u*=256);)i+=this[r+--e]*u;return i};a.prototype.readUint8=a.prototype.readUInt8=function(r,e){return r=r>>>0,e||y(r,1,this.length),this[r]};a.prototype.readUint16LE=a.prototype.readUInt16LE=function(r,e){return r=r>>>0,e||y(r,2,this.length),this[r]|this[r+1]<<8};a.prototype.readUint16BE=a.prototype.readUInt16BE=function(r,e){return r=r>>>0,e||y(r,2,this.length),this[r]<<8|this[r+1]};a.prototype.readUint32LE=a.prototype.readUInt32LE=function(r,e){return r=r>>>0,e||y(r,4,this.length),(this[r]|this[r+1]<<8|this[r+2]<<16)+this[r+3]*16777216};a.prototype.readUint32BE=a.prototype.readUInt32BE=function(r,e){return r=r>>>0,e||y(r,4,this.length),this[r]*16777216+(this[r+1]<<16|this[r+2]<<8|this[r+3])};a.prototype.readIntLE=function(r,e,n){r=r>>>0,e=e>>>0,n||y(r,e,this.length);for(var i=this[r],u=1,o=0;++o<e&&(u*=256);)i+=this[r+o]*u;return u*=128,i>=u&&(i-=Math.pow(2,8*e)),i};a.prototype.readIntBE=function(r,e,n){r=r>>>0,e=e>>>0,n||y(r,e,this.length);for(var i=e,u=1,o=this[r+--i];i>0&&(u*=256);)o+=this[r+--i]*u;return u*=128,o>=u&&(o-=Math.pow(2,8*e)),o};a.prototype.readInt8=function(r,e){return r=r>>>0,e||y(r,1,this.length),this[r]&128?(255-this[r]+1)*-1:this[r]};a.prototype.readInt16LE=function(r,e){r=r>>>0,e||y(r,2,this.length);var n=this[r]|this[r+1]<<8;return n&32768?n|4294901760:n};a.prototype.readInt16BE=function(r,e){r=r>>>0,e||y(r,2,this.length);var n=this[r+1]|this[r]<<8;return n&32768?n|4294901760:n};a.prototype.readInt32LE=function(r,e){return r=r>>>0,e||y(r,4,this.length),this[r]|this[r+1]<<8|this[r+2]<<16|this[r+3]<<24};a.prototype.readInt32BE=function(r,e){return r=r>>>0,e||y(r,4,this.length),this[r]<<24|this[r+1]<<16|this[r+2]<<8|this[r+3]};a.prototype.readFloatLE=function(r,e){return r=r>>>0,e||y(r,4,this.length),N.read(this,r,!0,23,4)};a.prototype.readFloatBE=function(r,e){return r=r>>>0,e||y(r,4,this.length),N.read(this,r,!1,23,4)};a.prototype.readDoubleLE=function(r,e){return r=r>>>0,e||y(r,8,this.length),N.read(this,r,!0,52,8)};a.prototype.readDoubleBE=function(r,e){return r=r>>>0,e||y(r,8,this.length),N.read(this,r,!1,52,8)};function x(t,r,e,n,i,u){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>i||r<u)throw new RangeError('"value" argument is out of bounds');if(e+n>t.length)throw new RangeError("Index out of range")}a.prototype.writeUintLE=a.prototype.writeUIntLE=function(r,e,n,i){if(r=+r,e=e>>>0,n=n>>>0,!i){var u=Math.pow(2,8*n)-1;x(this,r,e,n,u,0)}var o=1,s=0;for(this[e]=r&255;++s<n&&(o*=256);)this[e+s]=r/o&255;return e+n};a.prototype.writeUintBE=a.prototype.writeUIntBE=function(r,e,n,i){if(r=+r,e=e>>>0,n=n>>>0,!i){var u=Math.pow(2,8*n)-1;x(this,r,e,n,u,0)}var o=n-1,s=1;for(this[e+o]=r&255;--o>=0&&(s*=256);)this[e+o]=r/s&255;return e+n};a.prototype.writeUint8=a.prototype.writeUInt8=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,1,255,0),this[e]=r&255,e+1};a.prototype.writeUint16LE=a.prototype.writeUInt16LE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,2,65535,0),this[e]=r&255,this[e+1]=r>>>8,e+2};a.prototype.writeUint16BE=a.prototype.writeUInt16BE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,2,65535,0),this[e]=r>>>8,this[e+1]=r&255,e+2};a.prototype.writeUint32LE=a.prototype.writeUInt32LE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,4,4294967295,0),this[e+3]=r>>>24,this[e+2]=r>>>16,this[e+1]=r>>>8,this[e]=r&255,e+4};a.prototype.writeUint32BE=a.prototype.writeUInt32BE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,4,4294967295,0),this[e]=r>>>24,this[e+1]=r>>>16,this[e+2]=r>>>8,this[e+3]=r&255,e+4};a.prototype.writeIntLE=function(r,e,n,i){if(r=+r,e=e>>>0,!i){var u=Math.pow(2,8*n-1);x(this,r,e,n,u-1,-u)}var o=0,s=1,f=0;for(this[e]=r&255;++o<n&&(s*=256);)r<0&&f===0&&this[e+o-1]!==0&&(f=1),this[e+o]=(r/s>>0)-f&255;return e+n};a.prototype.writeIntBE=function(r,e,n,i){if(r=+r,e=e>>>0,!i){var u=Math.pow(2,8*n-1);x(this,r,e,n,u-1,-u)}var o=n-1,s=1,f=0;for(this[e+o]=r&255;--o>=0&&(s*=256);)r<0&&f===0&&this[e+o+1]!==0&&(f=1),this[e+o]=(r/s>>0)-f&255;return e+n};a.prototype.writeInt8=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,1,127,-128),r<0&&(r=255+r+1),this[e]=r&255,e+1};a.prototype.writeInt16LE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,2,32767,-32768),this[e]=r&255,this[e+1]=r>>>8,e+2};a.prototype.writeInt16BE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,2,32767,-32768),this[e]=r>>>8,this[e+1]=r&255,e+2};a.prototype.writeInt32LE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,4,2147483647,-2147483648),this[e]=r&255,this[e+1]=r>>>8,this[e+2]=r>>>16,this[e+3]=r>>>24,e+4};a.prototype.writeInt32BE=function(r,e,n){return r=+r,e=e>>>0,n||x(this,r,e,4,2147483647,-2147483648),r<0&&(r=4294967295+r+1),this[e]=r>>>24,this[e+1]=r>>>16,this[e+2]=r>>>8,this[e+3]=r&255,e+4};function gr(t,r,e,n,i,u){if(e+n>t.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function Er(t,r,e,n,i){return r=+r,e=e>>>0,i||gr(t,r,e,4,34028234663852886e22,-34028234663852886e22),N.write(t,r,e,n,23,4),e+4}a.prototype.writeFloatLE=function(r,e,n){return Er(this,r,e,!0,n)};a.prototype.writeFloatBE=function(r,e,n){return Er(this,r,e,!1,n)};function Fr(t,r,e,n,i){return r=+r,e=e>>>0,i||gr(t,r,e,8,17976931348623157e292,-17976931348623157e292),N.write(t,r,e,n,52,8),e+8}a.prototype.writeDoubleLE=function(r,e,n){return Fr(this,r,e,!0,n)};a.prototype.writeDoubleBE=function(r,e,n){return Fr(this,r,e,!1,n)};a.prototype.copy=function(r,e,n,i){if(!a.isBuffer(r))throw new TypeError("argument should be a Buffer");if(n||(n=0),!i&&i!==0&&(i=this.length),e>=r.length&&(e=r.length),e||(e=0),i>0&&i<n&&(i=n),i===n||r.length===0||this.length===0)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),r.length-e<i-n&&(i=r.length-e+n);var u=i-n;return this===r&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(e,n,i):Uint8Array.prototype.set.call(r,this.subarray(n,i),e),u};a.prototype.fill=function(r,e,n,i){if(typeof r=="string"){if(typeof e=="string"?(i=e,e=0,n=this.length):typeof n=="string"&&(i=n,n=this.length),i!==void 0&&typeof i!="string")throw new TypeError("encoding must be a string");if(typeof i=="string"&&!a.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(r.length===1){var u=r.charCodeAt(0);(i==="utf8"&&u<128||i==="latin1")&&(r=u)}}else typeof r=="number"?r=r&255:typeof r=="boolean"&&(r=Number(r));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;e=e>>>0,n=n===void 0?this.length:n>>>0,r||(r=0);var o;if(typeof r=="number")for(o=e;o<n;++o)this[o]=r;else{var s=a.isBuffer(r)?r:a.from(r,i),f=s.length;if(f===0)throw new TypeError('The value "'+r+'" is invalid for argument "value"');for(o=0;o<n-e;++o)this[o+e]=s[o%f]}return this};var Ee=/[^+/0-9A-Za-z-_]/g;function Fe(t){if(t=t.split("=")[0],t=t.trim().replace(Ee,""),t.length<2)return"";for(;t.length%4!=0;)t=t+"=";return t}function tr(t,r){r=r||1/0;for(var e,n=t.length,i=null,u=[],o=0;o<n;++o){if(e=t.charCodeAt(o),e>55295&&e<57344){if(!i){if(e>56319){(r-=3)>-1&&u.push(239,191,189);continue}else if(o+1===n){(r-=3)>-1&&u.push(239,191,189);continue}i=e;continue}if(e<56320){(r-=3)>-1&&u.push(239,191,189),i=e;continue}e=(i-55296<<10|e-56320)+65536}else i&&(r-=3)>-1&&u.push(239,191,189);if(i=null,e<128){if((r-=1)<0)break;u.push(e)}else if(e<2048){if((r-=2)<0)break;u.push(e>>6|192,e&63|128)}else if(e<65536){if((r-=3)<0)break;u.push(e>>12|224,e>>6&63|128,e&63|128)}else if(e<1114112){if((r-=4)<0)break;u.push(e>>18|240,e>>12&63|128,e>>6&63|128,e&63|128)}else throw new Error("Invalid code point")}return u}function Ae(t){for(var r=[],e=0;e<t.length;++e)r.push(t.charCodeAt(e)&255);return r}function Be(t,r){for(var e,n,i,u=[],o=0;o<t.length&&!((r-=2)<0);++o)e=t.charCodeAt(o),n=e>>8,i=e%256,u.push(i),u.push(n);return u}function Ar(t){return V.toByteArray(Fe(t))}function q(t,r,e,n){for(var i=0;i<n&&!(i+e>=r.length||i>=t.length);++i)r[i+e]=t[i];return i}function F(t,r){return t instanceof r||t!=null&&t.constructor!=null&&t.constructor.name!=null&&t.constructor.name===r.name}function nr(t){return t!==t}var Le=function(){for(var t="0123456789abcdef",r=new Array(256),e=0;e<16;++e)for(var n=e*16,i=0;i<16;++i)r[n+i]=t[e]+t[i];return r}()});var _r=W((Oe,Ur)=>{m();var w=Ur.exports={},A,B;function ir(){throw new Error("setTimeout has not been defined")}function or(){throw new Error("clearTimeout has not been defined")}(function(){try{typeof setTimeout=="function"?A=setTimeout:A=ir}catch{A=ir}try{typeof clearTimeout=="function"?B=clearTimeout:B=or}catch{B=or}})();function Lr(t){if(A===setTimeout)return setTimeout(t,0);if((A===ir||!A)&&setTimeout)return A=setTimeout,setTimeout(t,0);try{return A(t,0)}catch{try{return A.call(null,t,0)}catch{return A.call(this,t,0)}}}function Ie(t){if(B===clearTimeout)return clearTimeout(t);if((B===or||!B)&&clearTimeout)return B=clearTimeout,clearTimeout(t);try{return B(t)}catch{try{return B.call(null,t)}catch{return B.call(this,t)}}}var I=[],D=!1,M,K=-1;function Te(){!D||!M||(D=!1,M.length?I=M.concat(I):K=-1,I.length&&Ir())}function Ir(){if(!D){var t=Lr(Te);D=!0;for(var r=I.length;r;){for(M=I,I=[];++K<r;)M&&M[K].run();K=-1,r=I.length}M=null,D=!1,Ie(t)}}w.nextTick=function(t){var r=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)r[e-1]=arguments[e];I.push(new Tr(t,r)),I.length===1&&!D&&Lr(Ir)};function Tr(t,r){this.fun=t,this.array=r}Tr.prototype.run=function(){this.fun.apply(null,this.array)};w.title="browser";w.browser=!0;w.env={};w.argv=[];w.version="";w.versions={};function T(){}w.on=T;w.addListener=T;w.once=T;w.off=T;w.removeListener=T;w.removeAllListeners=T;w.emit=T;w.prependListener=T;w.prependOnceListener=T;w.listeners=function(t){return[]};w.binding=function(t){throw new Error("process.binding is not supported")};w.cwd=function(){return"/"};w.chdir=function(t){throw new Error("process.chdir is not supported")};w.umask=function(){return 0}});var _,b,We,m=zr(()=>{_=z(Br()),b=z(_r()),We=function(t){function r(){var n=this||self;return delete t.prototype.__magic__,n}if(typeof globalThis=="object")return globalThis;if(this)return r();t.defineProperty(t.prototype,"__magic__",{configurable:!0,get:r});var e=__magic__;return e}(Object)});var jr=W((Pe,ur)=>{m();"use strict";var O=typeof Reflect=="object"?Reflect:null,br=O&&typeof O.apply=="function"?O.apply:function(r,e,n){return Function.prototype.apply.call(r,e,n)},Y;O&&typeof O.ownKeys=="function"?Y=O.ownKeys:Object.getOwnPropertySymbols?Y=function(r){return Object.getOwnPropertyNames(r).concat(Object.getOwnPropertySymbols(r))}:Y=function(r){return Object.getOwnPropertyNames(r)};function Ue(t){console&&console.warn&&console.warn(t)}var Cr=Number.isNaN||function(r){return r!==r};function l(){l.init.call(this)}ur.exports=l;ur.exports.once=Me;l.EventEmitter=l;l.prototype._events=void 0;l.prototype._eventsCount=0;l.prototype._maxListeners=void 0;var Mr=10;function H(t){if(typeof t!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}Object.defineProperty(l,"defaultMaxListeners",{enumerable:!0,get:function(){return Mr},set:function(t){if(typeof t!="number"||t<0||Cr(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");Mr=t}});l.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};l.prototype.setMaxListeners=function(r){if(typeof r!="number"||r<0||Cr(r))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+r+".");return this._maxListeners=r,this};function Rr(t){return t._maxListeners===void 0?l.defaultMaxListeners:t._maxListeners}l.prototype.getMaxListeners=function(){return Rr(this)};l.prototype.emit=function(r){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var i=r==="error",u=this._events;if(u!==void 0)i=i&&u.error===void 0;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var f=u[r];if(f===void 0)return!1;if(typeof f=="function")br(f,this,e);else for(var p=f.length,c=Or(f,p),n=0;n<p;++n)br(c[n],this,e);return!0};function Sr(t,r,e,n){var i,u,o;if(H(e),u=t._events,u===void 0?(u=t._events=Object.create(null),t._eventsCount=0):(u.newListener!==void 0&&(t.emit("newListener",r,e.listener?e.listener:e),u=t._events),o=u[r]),o===void 0)o=u[r]=e,++t._eventsCount;else if(typeof o=="function"?o=u[r]=n?[e,o]:[o,e]:n?o.unshift(e):o.push(e),i=Rr(t),i>0&&o.length>i&&!o.warned){o.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(r)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=t,s.type=r,s.count=o.length,Ue(s)}return t}l.prototype.addListener=function(r,e){return Sr(this,r,e,!1)};l.prototype.on=l.prototype.addListener;l.prototype.prependListener=function(r,e){return Sr(this,r,e,!0)};function _e(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Nr(t,r,e){var n={fired:!1,wrapFn:void 0,target:t,type:r,listener:e},i=_e.bind(n);return i.listener=e,n.wrapFn=i,i}l.prototype.once=function(r,e){return H(e),this.on(r,Nr(this,r,e)),this};l.prototype.prependOnceListener=function(r,e){return H(e),this.prependListener(r,Nr(this,r,e)),this};l.prototype.removeListener=function(r,e){var n,i,u,o,s;if(H(e),i=this._events,i===void 0)return this;if(n=i[r],n===void 0)return this;if(n===e||n.listener===e)--this._eventsCount==0?this._events=Object.create(null):(delete i[r],i.removeListener&&this.emit("removeListener",r,n.listener||e));else if(typeof n!="function"){for(u=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){s=n[o].listener,u=o;break}if(u<0)return this;u===0?n.shift():be(n,u),n.length===1&&(i[r]=n[0]),i.removeListener!==void 0&&this.emit("removeListener",r,s||e)}return this};l.prototype.off=l.prototype.removeListener;l.prototype.removeAllListeners=function(r){var e,n,i;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[r]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete n[r]),this;if(arguments.length===0){var u=Object.keys(n),o;for(i=0;i<u.length;++i)o=u[i],o!=="removeListener"&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(e=n[r],typeof e=="function")this.removeListener(r,e);else if(e!==void 0)for(i=e.length-1;i>=0;i--)this.removeListener(r,e[i]);return this};function kr(t,r,e){var n=t._events;if(n===void 0)return[];var i=n[r];return i===void 0?[]:typeof i=="function"?e?[i.listener||i]:[i]:e?Ce(i):Or(i,i.length)}l.prototype.listeners=function(r){return kr(this,r,!0)};l.prototype.rawListeners=function(r){return kr(this,r,!1)};l.listenerCount=function(t,r){return typeof t.listenerCount=="function"?t.listenerCount(r):Dr.call(t,r)};l.prototype.listenerCount=Dr;function Dr(t){var r=this._events;if(r!==void 0){var e=r[t];if(typeof e=="function")return 1;if(e!==void 0)return e.length}return 0}l.prototype.eventNames=function(){return this._eventsCount>0?Y(this._events):[]};function Or(t,r){for(var e=new Array(r),n=0;n<r;++n)e[n]=t[n];return e}function be(t,r){for(;r+1<t.length;r++)t[r]=t[r+1];t.pop()}function Ce(t){for(var r=new Array(t.length),e=0;e<r.length;++e)r[e]=t[e].listener||t[e];return r}function Me(t,r){return new Promise(function(e,n){function i(o){t.removeListener(r,u),n(o)}function u(){typeof t.removeListener=="function"&&t.removeListener("error",i),e([].slice.call(arguments))}Wr(t,r,u,{once:!0}),r!=="error"&&Re(t,i,{once:!0})})}function Re(t,r,e){typeof t.on=="function"&&Wr(t,"error",r,e)}function Wr(t,r,e,n){if(typeof t.on=="function")n.once?t.once(r,e):t.on(r,e);else if(typeof t.addEventListener=="function")t.addEventListener(r,function i(u){n.once&&t.removeEventListener(r,i),e(u)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t)}});m();m();var ar=z(jr()),X=class extends ar.EventEmitter{constructor(){super();this.messageId=0;if(!window.top)throw new Error("Must run inside iframe");this.bridgedEvents=new Set,window.addEventListener("message",r=>{let{transactionSimulatorBridgeEventEmit:e,type:n,args:i}=r.data;e&&this.emit(n,...i)}),window.top.postMessage({transactionSimulatorBridgeInit:!0},"*")}request(r){return this.send(r.method,r.params||[])}async send(r,e){let n=this.messageId;this.messageId++;let i={method:r,params:e};return new Promise((u,o)=>{if(!window.top)throw new Error("Must run inside iframe");window.top.postMessage({transactionSimulatorBridgeRequest:!0,request:i,messageId:n},"*");let s=f=>{let{transactionSimulatorBridgeResponse:p,messageId:c,error:h,response:v}=f.data;p&&c===n&&(window.removeEventListener("message",s),h?o(h):u(v))};window.addEventListener("message",s)})}on(r,e){if(!window.top)throw new Error("Must run inside iframe");return this.bridgedEvents.has(r)||(window.top.postMessage({transactionSimulatorBridgeEventListen:!0,type:r},"*"),this.bridgedEvents.add(r)),ar.EventEmitter.prototype.on.call(this,r,e),this}};console.log("injected",document.title);window.ethereum=new X;})();
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=data:application/json;base64,
